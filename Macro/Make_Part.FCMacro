#!/usr/bin/env python
# -*- coding: utf-8 -*-
import FreeCAD
import Part
import Sketcher
import FreeCAD as App
import FreeCADGui
import FreeCADGui as Gui
from PySide import QtGui, QtCore


class p:
    def Part(self):

        try:
            # get inputs from dialog
            name = self.d_name.text()
            width = self.d_width.text()
            length = 100
            height = 40
            self._make_body(name, width, length, height)
        except Exception as exc:
            FreeCAD.Console.PrintError("Ooops: %s" % exc)
        self.close()

    def _make_body(self, name, width, length, height):
        App.ActiveDocument.addObject("PartDesign::Body", name)
        body = App.ActiveDocument.getObject(name)
        sketch_name = "%s_sketch" % name
        body.newObjectAt(
            "Sketcher::SketchObject",
            sketch_name,
            FreeCADGui.Selection.getSelection(),
        )
        sketch = App.ActiveDocument.getObject(sketch_name)
        sketch.AttachmentOffset = App.Placement(
            App.Vector(0.0000000000, 0.0000000000, 0.0000000000),
            App.Rotation(0.0000000000, 0.0000000000, 0.0000000000),
        )
        sketch.MapReversed = False
        sketch.Support = [(App.ActiveDocument.getObject("XY_Plane"), "")]
        sketch.MapPathParameter = 0.000000
        sketch.MapMode = "FlatFace"
        App.ActiveDocument.recompute()
        geoList = []
        geoList.append(
            Part.LineSegment(
                App.Vector(-10, 20, 0),
                App.Vector(10, 20, 0),
            )
        )
        geoList.append(
            Part.LineSegment(
                App.Vector(10, 20, 0),
                App.Vector(10, -20, 0),
            )
        )
        geoList.append(
            Part.LineSegment(
                App.Vector(10, -20, 0),
                App.Vector(-10, -20, 0),
            )
        )
        geoList.append(
            Part.LineSegment(
                App.Vector(-10, -20, 0),
                App.Vector(-10, 20, 0),
            )
        )
        sketch.addGeometry(geoList, False)
        conList = []
        # create undimensioned constraints
        # (like you would roughly clicking the sketch in the GUI)
        conList.append(Sketcher.Constraint("Coincident", 0, 2, 1, 1))
        conList.append(Sketcher.Constraint("Coincident", 1, 2, 2, 1))
        conList.append(Sketcher.Constraint("Coincident", 2, 2, 3, 1))
        conList.append(Sketcher.Constraint("Coincident", 3, 2, 0, 1))
        conList.append(Sketcher.Constraint("Horizontal", 0))
        conList.append(Sketcher.Constraint("Horizontal", 2))
        conList.append(Sketcher.Constraint("Vertical", 1))
        conList.append(Sketcher.Constraint("Vertical", 3))
        conList.append(Sketcher.Constraint("Symmetric", 1, 2, 0, 1, -1, 1))
        sketch.addConstraint(conList)

        pad_name = "%s_pad" % name
        body.newObjectAt(
            "PartDesign::Pad", pad_name, FreeCADGui.Selection.getSelection()
        )
        pad = App.ActiveDocument.getObject(pad_name)
        pad.Profile = App.ActiveDocument.getObject(
            sketch_name
        )

        self.dimension_body(sketch, pad, width, length, height)
        pad.Length = height
        sketch.Visibility = False
        Gui.ActiveDocument.setEdit(
            App.ActiveDocument.getObject(name), 0, "%s." % pad_name
        )
        App.ActiveDocument.recompute()

    def dimension_body(self, sketch, pad, width, length, height):
        # apply dimensional constraints
        sketch.addConstraint(Sketcher.Constraint("DistanceX", 0, 1, 0, 2, 52.455330))
        sketch.setDatum(9, App.Units.Quantity("%s mm" % width))
        sketch.addConstraint(Sketcher.Constraint("DistanceY", 3, 1, 3, 2, 33.686350))
        sketch.setDatum(10, App.Units.Quantity("%f mm" % length))
        pad.Length = height
        pad.Length2 = 100.000000
        pad.UseCustomVector = 0
        pad.Direction = (1, 1, 1)
        pad.Type = 0
        pad.UpToFace = None
        pad.Reversed = 0
        pad.Midplane = 0
        pad.Offset = 0

    def close(self):
        self.dialog.hide()

    def _make_dialog(self):
        self.dialog = QtGui.QDialog()
        self.dialog.resize(240, 100)

        self.dialog.setWindowTitle("Create part")
        layout = QtGui.QVBoxLayout(self.dialog)

        name = QtGui.QLabel("Name")
        layout.addWidget(name)
        self.d_name = QtGui.QLineEdit()
        layout.addWidget(self.d_name)

        width = QtGui.QLabel("Width")
        layout.addWidget(width)
        self.d_width = Gui.UiLoader().createWidget('Gui::QuantitySpinBox')
        layout.addWidget(self.d_width)

        okbox = QtGui.QDialogButtonBox(self.dialog)
        okbox.setOrientation(QtCore.Qt.Horizontal)
        okbox.setStandardButtons(
            QtGui.QDialogButtonBox.Cancel | QtGui.QDialogButtonBox.Ok
        )
        layout.addWidget(okbox)
        QtCore.QObject.connect(okbox, QtCore.SIGNAL("accepted()"), self.Part)
        QtCore.QObject.connect(okbox, QtCore.SIGNAL("rejected()"), self.close)
        QtCore.QMetaObject.connectSlotsByName(self.dialog)

    def __init__(self):
        self._make_dialog()
        self.dialog.show()
        self.dialog.exec_()


p()
