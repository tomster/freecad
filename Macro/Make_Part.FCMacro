#!/usr/bin/env python
# -*- coding: utf-8 -*-
import FreeCAD
import Part
import Sketcher
import FreeCAD as App
import FreeCADGui
import FreeCADGui as Gui
from PySide import QtGui, QtCore
import freecad.asm3 as asm3


class p:

    name = None
    assembly = None
    body = None

    def create_part(self):

        try:
            # get inputs from dialog
            self.name = name = self.d_name.text()
            body = self._make_body(name)
            self._make_assembly(name, body)

        except Exception as exc:
            FreeCAD.Console.PrintError("Ooops: %s" % exc)
        self.close()

    def size_part(self):
        pass

    def _make_assembly(self, name, part):
        self.assembly = assembly = asm3.assembly.Assembly.make(
            App.ActiveDocument, name
        )
        assembly.ViewObject.dropObject(part, None, '', [])
        faces = [
            ("Face1", "rear"),
            ("Face2", "right"),
            ("Face3", "front"),
            ("Face4", "left"),
            ("Face5", "bottom"),
            ("Face6", "top"),
        ]
        for face, name in faces:
            Gui.Selection.clearSelection()
            selection = Gui.Selection.addSelection(self.pad, face)
            asm3.assembly.AsmElement.make(selection, name)

        return assembly

    def _make_body(self, name):
        body_name = "%s_body" % name
        App.ActiveDocument.addObject("PartDesign::Body", body_name)
        self.body = body = App.ActiveDocument.getObject(body_name)
        sketch_name = "%s_sketch" % name
        body.newObjectAt(
            "Sketcher::SketchObject",
            sketch_name,
            FreeCADGui.Selection.getSelection(),
        )
        self.sketch = sketch = App.ActiveDocument.getObject(sketch_name)
        sketch.AttachmentOffset = App.Placement(
            App.Vector(0.0000000000, 0.0000000000, 0.0000000000),
            App.Rotation(0.0000000000, 0.0000000000, 0.0000000000),
        )
        sketch.MapReversed = False
        sketch.Support = [(App.ActiveDocument.getObject("XY_Plane"), "")]
        sketch.MapPathParameter = 0.000000
        sketch.MapMode = "FlatFace"
        App.ActiveDocument.recompute()
        geoList = []
        geoList.append(
            Part.LineSegment(
                App.Vector(-10, 20, 0),
                App.Vector(10, 20, 0),
            )
        )
        geoList.append(
            Part.LineSegment(
                App.Vector(10, 20, 0),
                App.Vector(10, -20, 0),
            )
        )
        geoList.append(
            Part.LineSegment(
                App.Vector(10, -20, 0),
                App.Vector(-10, -20, 0),
            )
        )
        geoList.append(
            Part.LineSegment(
                App.Vector(-10, -20, 0),
                App.Vector(-10, 20, 0),
            )
        )
        sketch.addGeometry(geoList, False)
        conList = []
        # create undimensioned constraints
        # (like you would roughly clicking the sketch in the GUI)
        conList.append(Sketcher.Constraint("Coincident", 0, 2, 1, 1))
        conList.append(Sketcher.Constraint("Coincident", 1, 2, 2, 1))
        conList.append(Sketcher.Constraint("Coincident", 2, 2, 3, 1))
        conList.append(Sketcher.Constraint("Coincident", 3, 2, 0, 1))
        conList.append(Sketcher.Constraint("Horizontal", 0))
        conList.append(Sketcher.Constraint("Horizontal", 2))
        conList.append(Sketcher.Constraint("Vertical", 1))
        conList.append(Sketcher.Constraint("Vertical", 3))
        conList.append(Sketcher.Constraint("Symmetric", 1, 2, 0, 1, -1, 1))
        conList.append(Sketcher.Constraint("DistanceX", 0, 1, 0, 2, 50.0))
        conList.append(Sketcher.Constraint("DistanceY", 3, 1, 3, 2, 30.0))
        sketch.addConstraint(conList)

        self.pad_name = pad_name = "%s_pad" % name
        body.newObjectAt(
            "PartDesign::Pad", pad_name, FreeCADGui.Selection.getSelection()
        )
        self.pad = pad = App.ActiveDocument.getObject(pad_name)
        pad.Profile = App.ActiveDocument.getObject(sketch_name)
        sketch.Visibility = False
        # Gui.ActiveDocument.setEdit(
        #     App.ActiveDocument.getObject(name), 0, "%s." % pad_name
        # )
        App.ActiveDocument.recompute()
        return self.body

    def dimension_body(self, sketch, pad, width, length, height):
        # apply dimensional constraints
        sketch.setDatum(9, App.Units.Quantity("%s mm" % width))
        sketch.setDatum(10, App.Units.Quantity("%f mm" % length))
        pad.Length = height
        pad.Length2 = 100.000000
        pad.UseCustomVector = 0
        pad.Direction = (1, 1, 1)
        pad.Type = 0
        pad.UpToFace = None
        pad.Reversed = 0
        pad.Midplane = 0
        pad.Offset = 0

    def close(self):
        self.dialog.hide()

    def _make_creation_dialog(self):
        self.dialog = QtGui.QDialog()
        self.dialog.resize(240, 100)

        self.dialog.setWindowTitle("Create part")
        layout = QtGui.QVBoxLayout(self.dialog)

        name = QtGui.QLabel("Name")
        layout.addWidget(name)
        self.d_name = QtGui.QLineEdit()
        layout.addWidget(self.d_name)

        okbox = QtGui.QDialogButtonBox(self.dialog)
        okbox.setOrientation(QtCore.Qt.Horizontal)
        okbox.setStandardButtons(
            QtGui.QDialogButtonBox.Cancel | QtGui.QDialogButtonBox.Ok
        )
        layout.addWidget(okbox)
        QtCore.QObject.connect(okbox, QtCore.SIGNAL("accepted()"), self.create_part)
        QtCore.QObject.connect(okbox, QtCore.SIGNAL("rejected()"), self.close)
        QtCore.QMetaObject.connectSlotsByName(self.dialog)

    def _make_dimension_dialog(self):
        self.dimension_dialog = QtGui.QDialog()
        self.dimension_dialog.resize(240, 200)

        self.dimension_dialog.setWindowTitle("Dimension part")
        layout = QtGui.QVBoxLayout(self.dimension_dialog)

        width = QtGui.QLabel("Width")
        layout.addWidget(width)
        self.d_width = Gui.UiLoader().createWidget("Gui::QuantitySpinBox")
        self.d_width.setProperty("unit", "mm")
        layout.addWidget(self.d_width)
        Gui.ExpressionBinding(self.d_width).bind(self.sketch.Constraints[-2], "Value")

        okbox = QtGui.QDialogButtonBox(self.dimension_dialog)
        okbox.setOrientation(QtCore.Qt.Horizontal)
        okbox.setStandardButtons(
            QtGui.QDialogButtonBox.Cancel | QtGui.QDialogButtonBox.Ok
        )
        layout.addWidget(okbox)
        QtCore.QObject.connect(okbox, QtCore.SIGNAL("accepted()"), self.SizePart)
        QtCore.QObject.connect(
            okbox, QtCore.SIGNAL("rejected()"), self.close_dimension_dialog
        )
        QtCore.QMetaObject.connectSlotsByName(self.dimension_dialog)

    def close_dimension_dialog(self):
        self.dimension_dialog.hide()

    def __init__(self):
        self._make_creation_dialog()
        self.dialog.show()
        self.dialog.exec_()
        # we now should have a named body with sketch and padding
        # self._make_dimension_dialog()
        # self.dimension_dialog.show()
        # self.dimension_dialog.exec_()


p()
