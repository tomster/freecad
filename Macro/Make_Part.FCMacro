#!/usr/bin/env python
# -*- coding: utf-8 -*-
import FreeCAD
import Part
import Sketcher
import FreeCAD as App
import FreeCADGui
import FreeCADGui as Gui
from PySide import QtGui, QtCore


class p:
    def Part(self):

        try:
            # get inputs from dialog
            name = self.d_name.text()
            width = self.d_width.text()
            length = 100
            height = 40
            self._make_body(name, width, length, height)
        except Exception as exc:
            FreeCAD.Console.PrintError("Ooops: %s" % exc)
        self.close()

    def _make_body(self, name, width, length, height):
        sketch_name = "%s_sketch" % name
        App.ActiveDocument.addObject("PartDesign::Body", name)
        App.ActiveDocument.getObject(name).newObjectAt(
            "Sketcher::SketchObject",
            sketch_name,
            FreeCADGui.Selection.getSelection(),
        )
        App.ActiveDocument.getObject(sketch_name).AttachmentOffset = App.Placement(
            App.Vector(0.0000000000, 0.0000000000, 0.0000000000),
            App.Rotation(0.0000000000, 0.0000000000, 0.0000000000),
        )
        App.ActiveDocument.getObject(sketch_name).MapReversed = False
        App.ActiveDocument.getObject(sketch_name).Support = [
            (App.ActiveDocument.getObject("XY_Plane"), "")
        ]
        App.ActiveDocument.getObject(sketch_name).MapPathParameter = 0.000000
        App.ActiveDocument.getObject(sketch_name).MapMode = "FlatFace"
        App.ActiveDocument.recompute()
        geoList = []
        geoList.append(
            Part.LineSegment(
                App.Vector(-10, 20, 0),
                App.Vector(10, 20, 0),
            )
        )
        geoList.append(
            Part.LineSegment(
                App.Vector(10, 20, 0),
                App.Vector(10, -20, 0),
            )
        )
        geoList.append(
            Part.LineSegment(
                App.Vector(10, -20, 0),
                App.Vector(-10, -20, 0),
            )
        )
        geoList.append(
            Part.LineSegment(
                App.Vector(-10, -20, 0),
                App.Vector(-10, 20, 0),
            )
        )
        App.ActiveDocument.getObject(sketch_name).addGeometry(geoList, False)
        conList = []
        conList.append(Sketcher.Constraint("Coincident", 0, 2, 1, 1))
        conList.append(Sketcher.Constraint("Coincident", 1, 2, 2, 1))
        conList.append(Sketcher.Constraint("Coincident", 2, 2, 3, 1))
        conList.append(Sketcher.Constraint("Coincident", 3, 2, 0, 1))
        conList.append(Sketcher.Constraint("Horizontal", 0))
        conList.append(Sketcher.Constraint("Horizontal", 2))
        conList.append(Sketcher.Constraint("Vertical", 1))
        conList.append(Sketcher.Constraint("Vertical", 3))
        App.ActiveDocument.getObject(sketch_name).addConstraint(conList)

        App.ActiveDocument.recompute()
        App.ActiveDocument.getObject(sketch_name).addConstraint(
            Sketcher.Constraint("Symmetric", 1, 2, 0, 1, -1, 1)
        )
        App.ActiveDocument.recompute()
        App.ActiveDocument.getObject(sketch_name).addConstraint(
            Sketcher.Constraint("DistanceX", 0, 1, 0, 2, 52.455330)
        )
        App.ActiveDocument.getObject(sketch_name).setDatum(
            9, App.Units.Quantity("%s mm" % width)
        )
        App.ActiveDocument.recompute()
        App.ActiveDocument.getObject(sketch_name).addConstraint(
            Sketcher.Constraint("DistanceY", 3, 1, 3, 2, 33.686350)
        )
        App.ActiveDocument.getObject(sketch_name).setDatum(
            10, App.Units.Quantity("%f mm" % length)
        )
        App.ActiveDocument.recompute()
        pad_name = "%s_pad" % name

        App.ActiveDocument.getObject(name).newObjectAt(
            "PartDesign::Pad", pad_name, FreeCADGui.Selection.getSelection()
        )
        App.ActiveDocument.getObject(
            pad_name
        ).Profile = App.ActiveDocument.getObject(sketch_name)
        App.ActiveDocument.getObject(pad_name).Length = height
        App.ActiveDocument.getObject(sketch_name).Visibility = False
        App.ActiveDocument.recompute()
        Gui.ActiveDocument.setEdit(
            App.ActiveDocument.getObject(name), 0, "%s." % pad_name
        )
        App.ActiveDocument.getObject(pad_name).Length = height
        App.ActiveDocument.getObject(pad_name).Length2 = 100.000000
        App.ActiveDocument.getObject(pad_name).UseCustomVector = 0
        App.ActiveDocument.getObject(pad_name).Direction = (1, 1, 1)
        App.ActiveDocument.getObject(pad_name).Type = 0
        App.ActiveDocument.getObject(pad_name).UpToFace = None
        App.ActiveDocument.getObject(pad_name).Reversed = 0
        App.ActiveDocument.getObject(pad_name).Midplane = 0
        App.ActiveDocument.getObject(pad_name).Offset = 0
        App.ActiveDocument.recompute()

    def close(self):
        self.dialog.hide()

    def _make_dialog(self):
        self.dialog = QtGui.QDialog()
        self.dialog.resize(240, 100)

        self.dialog.setWindowTitle("Create part")
        la = QtGui.QVBoxLayout(self.dialog)

        name = QtGui.QLabel("Name")
        la.addWidget(name)
        self.d_name = QtGui.QLineEdit()
        la.addWidget(self.d_name)

        width = QtGui.QLabel("Width")
        la.addWidget(width)
        self.d_width = QtGui.QuantitySpinBox()
        la.addWidget(self.d_width)

        okbox = QtGui.QDialogButtonBox(self.dialog)
        okbox.setOrientation(QtCore.Qt.Horizontal)
        okbox.setStandardButtons(
            QtGui.QDialogButtonBox.Cancel | QtGui.QDialogButtonBox.Ok
        )
        la.addWidget(okbox)
        QtCore.QObject.connect(okbox, QtCore.SIGNAL("accepted()"), self.Part)
        QtCore.QObject.connect(okbox, QtCore.SIGNAL("rejected()"), self.close)
        QtCore.QMetaObject.connectSlotsByName(self.dialog)

    def __init__(self):
        self._make_dialog()
        self.dialog.show()
        self.dialog.exec_()


p()
